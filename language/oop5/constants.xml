<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 922b4b5aeb327d78ea1bb4b932e5db2e9a03ffc5 Maintainer: mumumu Status: ready -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>クラス定数</title>
 <para>
  値が変更できない <link linkend="language.constants">定数</link> をクラス内に定義することができます。
  クラス定数のデフォルトのアクセス範囲は <literal>public</literal> です。
 </para>
 <note>
  <para>
   クラス定数は、子クラスで再定義することもできます。
   PHP 8.1.0 以降では、<link linkend="language.oop5.final">final</link>
   として定義されたクラス定数は、子クラスで再定義できません。
  </para>
 </note>
 <para>
  インターフェイスに定数を持たせることもできます。
  <link linkend="language.oop5.interfaces">インターフェイスについてのドキュメント</link>
  で例を御覧ください。
 </para>
 <para>
  変数を用いてクラスを参照することも可能です。
  変数の値に (<literal>self</literal> や <literal>parent</literal>、
  <literal>static</literal> といった)
  キーワードを指定することはできません。
 </para>
 <para>
  クラス定数はクラス単位で割り当てられるものです。インスタンス単位ではないことに注意しましょう。
 </para>
 <para>
  PHP 8.3.0 以降では、クラス定数は <literal>bool</literal>,
  <literal>int</literal>, <literal>float</literal>, <literal>string</literal>, <literal>array</literal> のようなスカラー型を持つことができます。
  <literal>array</literal> を使う場合、その内容は他のスカラー型に限ります。
 </para>
 <example>
   <title>定数の定義と使用</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    const CONSTANT = 'constant value';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MyClass::CONSTANT . "\n";

$classname = "MyClass";
echo $classname::CONSTANT . "\n";

$class = new MyClass();
$class->showConstant();

echo $class::CONSTANT."\n";
?>
]]>
  </programlisting>
 </example>
 <para>
  特別な <constant>::class</constant> 定数を使うと、
  コンパイル時の完全修飾クラス名が解決できます。
  これは名前空間クラスに役立ちます。
 </para>
 <example>
  <title>名前空間の ::class の例</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>クラス内での定数式の例</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'The value of THREE is '.self::THREE;
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>PHP 7.1.0 以降の、クラス定数のアクセス範囲</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
  </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 </example>
 <note>
  <para>
   PHP 7.1.0 以降は、クラス定数のアクセス範囲を指定できるようになりました。
  </para>
 </note>
 <example>
  <title>PHP 8.3.0 以降で行われる、クラス定数のアクセス権の関係チェック</title>
  <programlisting role="php">
<![CDATA[
<?php

interface MyInterface
{
    public const VALUE = 42;
}

class MyClass implements MyInterface
{
    protected const VALUE = 42;
}
?>
]]>
  </programlisting>
  &example.outputs.83;
  <screen>
<![CDATA[
Fatal error: Access level to MyClass::VALUE must be public (as in interface MyInterface) …
]]>
  </screen>
 </example>
 <note>
  <simpara>
   PHP 8.3.0 以降では、アクセス権の関係がより厳密にチェックされるようになりました。
   これより前のバージョンでは、
   クラス定数のアクセス権は、インターフェイスを実装した側の定数のそれと異なっていても問題ありませんでした。
  </simpara>
 </note>
 <example>
  <title>PHP 8.3.0 以降で有効な、クラス定数を取得する文法</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}

$name = 'BAR';
echo Foo::{$name}, PHP_EOL; // bar
?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   PHP 8.3.0 以降では、クラス定数は変数を使って動的に取得できます。
  </para>
 </note>
 <example>
  <title>PHP 8.3.0 以降で有効な、クラス定数の型付け</title>
  <programlisting role="php">
<![CDATA[
<?php

class MyClass {
    public const bool MY_BOOL = true;
    public const int MY_INT = 1;
    public const float MY_FLOAT = 1.01;
    public const string MY_STRING = 'one';
    public const array MY_ARRAY = [self::MY_BOOL, self::MY_INT, self::MY_FLOAT, self::MY_STRING];
}

var_dump(MyClass::MY_BOOL);
var_dump(MyClass::MY_INT);
var_dump(MyClass::MY_FLOAT);
var_dump(MyClass::MY_STRING);
var_dump(MyClass::MY_ARRAY);
?>
]]>
  </programlisting>
  &example.outputs.83;
  <screen>
<![CDATA[
bool(true)
int(1)
float(1.01)
string(3) "one"
array(4) {
  [0]=>
  bool(true)
  [1]=>
  int(1)
  [2]=>
  float(1.01)
  [3]=>
  string(3) "one"
}
   ]]>
  </screen>
 </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
