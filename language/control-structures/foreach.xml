<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ba7093cf7f30dbcd301c62536ac7ef8664d891f4 Maintainer: mumumu Status: ready -->
<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  <literal>foreach</literal> は、
  配列と <interfacename>Traversable</interfacename>
  オブジェクトを反復処理する簡単な方法を提供します。
  それらと異なるデータ型や、未初期化の変数と一緒に <literal>foreach</literal>
  を使うと、エラーが発生します。
  <informalexample>
   <simpara>
    <literal>foreach</literal> は、オプションで以下のようにして要素ごとの <literal>key</literal> も取得できます。
   </simpara>
   <programlisting>
<![CDATA[
foreach (iterable_expression as $value) {
    statement_list
}

foreach (iterable_expression as $key => $value) {
    statement_list
}
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  最初の形式は、<literal>iterable_expression</literal> で指定した反復可能な値に
  関してループ処理を行います。各反復において現在の要素の値が
  <literal>$value</literal>に代入されます。
 </simpara>
 <simpara>
  2番目の形式は、さらに各反復で現在の要素のキーを変数
  <literal>$key</literal>に代入します。
 </simpara>
 <simpara>
  <literal>foreach</literal> は、
  <function>current</function>  や
  <function>key</function>
  のような関数で使われる、内部的な配列のポインタを変更しない点に注意して下さい。 
 </simpara>
 <simpara>
  <link linkend="language.oop5.iterations">オブジェクトの反復処理をカスタマイズ</link>
  することもできます。
 </simpara>

 <example>
  <title>一般的な <literal>foreach</literal> の使用法</title>
  <programlisting role="php">
<![CDATA[
<?php

/* 例: 値のみ */
$array = [1, 2, 3, 17];

foreach ($array as $value) {
    echo "Current element of \$array: $value.\n";
}

/* 例: キーと値 */
$array = [
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
];

foreach ($array as $key => $value) {
    echo "Key: $key => Value: $value\n";
}

/* 例: 多次元のキーと値の配列 */
$grid = [];
$grid[0][0] = "a";
$grid[0][1] = "b";
$grid[1][0] = "y";
$grid[1][1] = "z";

foreach ($grid as $y => $row) {
    foreach ($row as $x => $value) {
        echo "Value at position x=$x and y=$y: $value\n";
    }
}

/* Example: dynamic arrays */
foreach (range(1, 5) as $value) {
    echo "$value\n";
}
?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   <literal>foreach</literal> は、
   <link linkend="language.operators.errorcontrol"><literal>@</literal></link>
   を使ってエラーメッセージを抑制する機能はサポートしていません。
  </para>
 </note>

 <sect2 xml:id="control-structures.foreach.list">
  <title>ネストした配列のアンパック</title>
  <?phpdoc print-version-for="foreach.list"?>
  <para>
   配列の配列を反復処理し、
   ネストした配列をループ変数に展開させることができます。
   <link linkend="language.types.array.syntax.destructuring">配列の分解</link>
   を <literal>[]</literal> で行うか、<function>list</function> 
   言語構造を反復処理の値として指定します。
   <note>
    <simpara>
     <literal>[]</literal> による
     <link linkend="language.types.array.syntax.destructuring">配列の分解</link>
     処理は、PHP 7.1.0 以降でのみ利用可能である点に注意しましょう。
    </simpara>
   </note>
  </para>

  <para>
   <informalexample>
    <simpara>
     以下の例は両方、
     <literal>$a</literal> にネストされた配列の最初の要素が設定され、
     <literal>$b</literal> には二番目の要素が含まれます:
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b]) {
    echo "A: $a; B: $b\n";
}

foreach ($array as list($a, $b)) {
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   配列の要素より少ない変数が指定された場合、
   残りの要素は無視されます。
   同様に、以下のようにしてカンマを使うことで要素をスキップできます:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2, 5],
    [3, 4, 6],
];

foreach ($array as [$a, $b]) {
    // Note that there is no $c here.
    echo "$a $b\n";
}

foreach ($array as [, , $c]) {
    // Skipping over $a and $b
    echo "$c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1 2
3 4
5
6
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   以下のように、<function>list</function>
   を埋めるだけの十分な要素数が配列にない場合、警告が発生します:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b, $c]) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C:

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C:
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="control-structures.foreach.reference">
  <title>foreach とリファレンス</title>
  <para>
   ループ中で、
   <literal>$value</literal> の前に <literal>&amp;</literal>
   をつけることで、配列の要素を直接変更することができます。
   この場合、値は <link linkend="language.references">リファレンス</link>
   として代入されます。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now [2, 4, 6, 8]
unset($value); // break the reference with the last element
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <warning>
   <simpara>
    配列の最後の要素の <literal>$value</literal> へのリファレンスは、
    <literal>foreach</literal> が終了した後も残ったままです。
    このリファレンスは <function>unset</function> することをお勧めします。
    そうしないと、以下のようなことが起きてしまいます:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr は現在 [2, 4, 6, 8]

// unset($value) しないと、$value はまだ最後の要素 $arr[3] を指した状態のままです

foreach ($arr as $key => $value) {
    // $arr[3] は $arr の値ごとに更新され続けてしまいます...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...最終的に、最後から2番目の値が最後の値にコピーされるまで
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
]]>
    </screen>
   </informalexample>
  </warning>
  <example>
  <title>定数の配列の値を、リファレンスで反復処理する</title>
   <programlisting role="php">
<![CDATA[
<?php
foreach ([1, 2, 3, 4] as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.types.array">array</link></member>
   <member><interfacename>Traversable</interfacename></member>
   <member><link linkend="language.types.iterable">iterable</link></member>
   <member><function>list</function></member>
  </simplelist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
