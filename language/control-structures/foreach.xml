<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 53a400680d0cb2ddabd4493fb9846533c422e90d Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  <literal>foreach</literal> 構文は、<type>array</type> や <interfacename>Traversable</interfacename> オブジェクトを簡単に反復処理する方法を提供します。
  それらと別のデータ型を含む変数や、初期化されていない変数とともに使用するとエラーになります。
  <informalexample>
   <simpara>
    <literal>foreach</literal> は、各要素の <literal>key</literal> をオプションで取得できます:
   </simpara>
   <programlisting>
<![CDATA[
foreach (iterable_expression as $value) {
    文のリスト
}

foreach (iterable_expression as $key => $value) {
    文のリスト
}
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  最初の形式は、<literal>iterable_expression</literal> で指定した反復可能な値に
  関してループ処理を行います。各反復において現在の要素の値が
  <literal>$value</literal>に代入されます。
 </simpara>
 <simpara>
  2番目の形式は、さらに各反復で現在の要素のキーを変数
  <literal>$key</literal>に代入します。
 </simpara>
 <simpara>
   <literal>foreach</literal> は、
   <function>current</function>  や
   <function>key</function>
   のような関数で使われる、内部的な配列のポインタを変更しない点に注意して下さい。
 </simpara>
 <simpara>
  <link linkend="language.oop5.iterations">オブジェクトの反復処理をカスタマイズ</link>
  することもできます。
 </simpara>

 <example>
  <title>一般的な <literal>foreach</literal> の使用法</title>
  <programlisting role="php">
<![CDATA[
<?php
/* 例: 値のみ */
$array = [1, 2, 3, 17];
foreach ($array as $value) {
    echo "現在の \$array の要素: $value\n";
}

/* 例: キーと値 */
$array = [
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
];
foreach ($array as $key => $value) {
    echo "キー: $key => 値: $value\n";
}

/* 例: 多次元のキーと値の配列 */
$grid = [];
$grid[0][0] = "a";
$grid[0][1] = "b";
$grid[1][0] = "y";
$grid[1][1] = "z";
foreach ($grid as $y => $row) {
    foreach ($row as $x => $value) {
        echo "x=$x, y=$y の位置の値: $value\n";
    }
}

/* 例: 動的配列 */
foreach (range(1, 5) as $value) {
    echo "$value\n";
}
?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   <literal>foreach</literal> は、<literal linkend="language.operators.errorcontrol">@</literal>
   による、エラーメッセージの出力を抑制する機能をサポートしていません。
  </para>
 </note>

 <sect2 xml:id="control-structures.foreach.list">
  <title>ネストした配列の展開</title>
  <?phpdoc print-version-for="foreach.list"?>
  <para>
   配列の配列を反復処理し、ネストされた配列をループ変数に展開することが可能です。
   <link linkend="language.types.array.syntax.destructuring">配列の分解</link>
   を <literal>[]</literal> で行うか、<function>list</function> 言語構造の値として配列を指定します。
   <note>
    <simpara>
     <literal>[]</literal> による
     <link linkend="language.types.array.syntax.destructuring">配列の分解</link>
     は、PHP 7.1.0 以降でのみ可能であることに注意してください。
    </simpara>
   </note>
  </para>

  <para>
   <informalexample>
    <simpara>
     次の例では、どちらも <literal>$a</literal> がネストされた配列の最初の要素に設定され、
     <literal>$b</literal> が2番目の要素を含むようになります:
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b]) {
    echo "A: $a; B: $b\n";
}

foreach ($array as list($a, $b)) {
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   配列内の要素よりも少ない変数を指定すると、
   残りの要素は無視されます。
   同様に、カンマを使用して要素をスキップできます:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2, 3],
    [4, 5, 6],
];

foreach ($array as [$a, $b]) {
    // ここに $c がないことに注意してください。
    echo "$a $b\n";
}

foreach ($array as [, , $c]) {
    // $a と $b をスキップ
    echo "$c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1 2
3 4
5
6
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   <function>list</function> で指定した変数を埋めるだけの要素が足りないときには、notice が発生します。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b, $c]) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C: 

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C: 
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="control-structures.foreach.reference">
  <title>foreach とリファレンス</title>
  <para>
   ループ内で配列要素を直接変更するには、<literal>$value</literal> の前に <literal>&amp;</literal> を付けます。
   その場合、値は<link linkend="language.references">リファレンス</link>によって代入されます。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now [2, 4, 6, 8]
unset($value); // 最後の要素へのリファレンスを解除する
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <warning>
   <simpara>
    最後の配列要素の <literal>$value</literal> への参照は、<literal>foreach</literal> ループの後も残ります。
    <function>unset</function> を使ってこれらを破棄することをお勧めします。
    そうしないと、以下のようなことが起こります:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now [2, 4, 6, 8]

// unset($value) しないと、$value はまだ最後の要素 $arr[3] への参照です

foreach ($arr as $key => $value) {
    // $arr[3] は $arr の各値で更新されます...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...最終的に、最後から2番目の値が最後の値にコピーされるまで
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
]]>
    </screen>
   </informalexample>
  </warning>
  <example>
  <title>リファレンスによる、定数配列の値の反復処理</title>
   <programlisting role="php">
<![CDATA[
<?php
foreach ([1, 2, 3, 4] as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.types.array">array</link></member>
   <member><interfacename>Traversable</interfacename></member>
   <member><link linkend="language.types.iterable">iterable</link></member>
   <member><function>list</function></member>
  </simplelist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
