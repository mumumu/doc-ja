<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e150cc645a17588282e5e6b5e43e600a2f345549 Maintainer: mumumu Status: ready -->

<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新機能</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>型付きプロパティ</title>

   <para>
    クラスのプロパティは、新たに型宣言をサポートするようになりました
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class User {
    public int $id;
    public string $name;
}
?>
]]>
     </programlisting>
    </informalexample>
    上の例は、 <literal>$user->id</literal> には <type>int</type> の 値だけを、そして <literal>$user->name</literal> には <type>string</type> の値だけを代入できるように強制します。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>アロー関数</title>

   <para>
    <link linkend="functions.arrow">アロー関数</link>は、暗黙的な値スコープを持った関数を定義する簡便な文法を提供します。

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$factor = 10;
$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>戻り値の型を狭めたり、引数の型を広げたりする</title>

   <para>
    次のようなコードが動作するようになります:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {}
class B extends A {}

class Producer {
    public function method(): A {}
}
class ChildProducer extends Producer {
    public function method(): B {}
}
?>
]]>
     </programlisting>
    </informalexample>
    完全な型の変位指定は、オートローディングが使われている場合のみ有効です。単一ファイル内では、型の参照が循環参照していない場合のみ可能です。なぜなら、全てのクラスは参照する前に利用可能でなければならないからです。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

/**
 * これらのクラスは、LSP の要件を満たします。
 * なぜなら、C は A の部分型だからです。
 * しかし、B が宣言された時点で、C はまだ利用可能ではありません。
 */
class A
{
    public function method(): A {}
}

class B extends A
{
    // Fatal error: Could not check compatibility between B::method():C and
    // A::method(): A, because class С is not available
    public function method(): С {}
}

class C extends B {}

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>Null 合体代入演算子</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$array['key'] ??= computeDefault();
// は、以下にほぼ等しい
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>配列内での値のアンパック</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$parts = ['apple', 'pear'];
$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>数値リテラルのセパレータ</title>

   <para>
    数値リテラルは、桁と桁の間にアンダースコアを挿入できるようになりました。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
6.674_083e-11; // float
299_792_458;   // decimal
0xCAFE_F00D;   // hexadecimal
0b0101_1111;   // binary
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>
 
  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>弱い参照</title>

   <para>
    <link linkend="class.weakreference">弱い参照</link> により、オブジェクトが破棄されるのを妨げないオブジェクトへの参照を保持することが可能です。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>__toString() から例外をスロー可能に</title>

   <para>
    <link linkend="object.tostring">__toString()</link>
    から例外をスローできるようになりました。以前は、この場合には致命的なエラーが発生していました。この関数内に既に存在する、回復可能な致命的なエラーは
    <classname>Error</classname> 例外クラスに変換されます。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>CURL</title>
  
  <para>
   <classname>CURLFile</classname> は、CURL拡張モジュールが libcurl 7.56.0 より新しいものでビルドされた場合は、通常のファイル名に加えて、ストリームラッパーをサポートするようになります。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Filter</title>
  
  <para>
   <constant>FILTER_VALIDATE_FLOAT</constant> フィルタは
   <literal>min_range</literal> と <literal>max_range</literal>
   オプションをサポートするようになりました。
   これは、<constant>FILTER_VALIDATE_INT</constant> と同じセマンティクスです。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>FFI</title>

  <para>
   FFI は、ネイティブ関数を呼び出したり、ネイティブな値にアクセスしたり、Cライブラリで定義されたデータ構造を生成/アクセスする簡単な方法を提供する新しい拡張モジュールです。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>GD</title>

  <para>
   画像に scatter フィルタを適用するための
   <constant>IMG_FILTER_SCATTER</constant> が追加されました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Hash</title>

  <para>
   Castagnoli 多項式を使った <literal>crc32c</literal>
   ハッシュが追加されました。
   CRC32 バリアントは、 iSCSI, SCTP, Btrfs, ext4
   のようなストレージシステムで使われています。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>マルチバイト文字列</title>

  <para>
   <function>str_split</function> と同等の機能を提供するものの、バイトではなく、コードポイント単位で動作する <function>mb_str_split</function> 関数が追加されました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>OPcache</title>

  <para>
   <link linkend="opcache.preloading">コードを事前ロードする機能</link> がサポートされました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>正規表現 (Perl互換)</title>

  <para>
   <function>preg_replace_callback</function> および <function>preg_replace_callback_array</function>
   関数は、追加のフラグを受け入れるようになりました。
   <constant>PREG_OFFSET_CAPTURE</constant> と <constant>PREG_UNMATCHED_AS_NULL</constant> です。これは、コールバック関数に渡される matches配列のフォーマットに影響します。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>PDO</title>

  <para>
   ユーザー名とパスワードが、PDO DSN の一部として指定できるようになりました。対象となるのは、mysql, mssql, sybase, dblib, firebird, oci ドライバです。以前は、この機能は pgsql ドライバでのみサポートされていました。ユーザー名/パスワードがコンストラクタとDSNの両方で指定された場合は、コンストラクタの指定が優先します。
  </para>
  <para>
      SQLクエリのクエスチョンマークが、パラメータのプレースホルダーとして解釈されるのを防ぐためにエスケープできるようになりました。<literal>??</literal> を書くことで、単一のクエスチョンマークをデータベースに送信できるようになります。PostgreSQL のJSONのキーが存在するかを確認する演算子 (<literal>?</literal>) として使って下さい。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>PDO_OCI</title>

  <para>
   <methodname>PDOStatement::getColumnMeta</methodname> が利用できるようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   は、ステートメントが読み取り専用かどうか、つまりそれがデータベースを変更しないかをチェックできるようになりました。
  </para>
  <para>
   <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES,
   true)</literal> 関数によって、<function>PDO::errorInfo</function> と
   <function>PDOStatement::errorInfo</function> 経由で SQLite3
   の拡張結果コードを使えるようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   最新の拡張結果コードを取得するために、 <methodname>SQLite3::lastExtendedErrorCode</methodname> が追加されました。 
  </para>
  <para>
   <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>
   が追加されました。これによって、
   <methodname>SQLite3::lastErrorCode</methodname>
   が拡張結果コードを返すようになります。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>標準ライブラリ</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>strip_tags() をタグ名の配列とともに使う</title>
   <para>
    <function>strip_tags</function>
    関数は、許可するタグの配列も受け入れるようになりました。つまり、<literal>strip_tags($str,
    '&lt;a&gt;&lt;p&gt;')</literal> の代わりに、 <literal>strip_tags($str,
    ['a', 'p'])</literal> と書けるようになったということです。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>カスタムオブジェクトのシリアル化</title>
   <para>
    新しいカスタムオブジェクトのシリアル化の機構が追加されました。これは、新しいふたつのマジックメソッド
    <literal>__serialize</literal> と <literal>__unserialize</literal>
    を使います。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// オブジェクトに必要な状態を全て保持した配列を返す
public function __serialize(): array
{
}

// 与えられた data 配列から、オブジェクトの状態を復元する
public function __unserialize(array $data): void
{
}
?>
]]>
     </programlisting>
    </informalexample>
    新しいシリアル化の機構は、 <interfacename>Serializable</interfacename>
    インターフェイス を置き換えるものです。
    <interfacename>Serializable</interfacename>
    インターフェイスは将来非推奨になるでしょう。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>引数を渡さずに array_merge 系の関数を使用する</title>
   <para>
    <function>array_merge</function> および
    <function>array_merge_recursive</function>
    関数は、引数なしでも呼び出せるようになりました。この場合、空の配列が返されます。これは、<literal>array_merge(...$arrays)</literal>
    のように、... 演算子と組み合わせて使う時に便利です。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title><function>proc_open</function> 関数</title>
   <para>
    <function>proc_open</function>
    関数は、コマンドの文字列ではなく、配列を受け入れるようになりました。この場合、プロセスは(shellを通さず) 直接オープンされ、PHP が必要な引数のエスケープをすべて行います。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
proc_open(['php', '-r', 'echo "Hello World\n";'], $descriptors, $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <function>proc_open</function> が、
    <literal>redirect</literal> と <literal>null</literal> ディスクリプタをサポートしました。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// シェルにおける 2>&1 のような操作
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);
// シェルにおける 2>/dev/null や 2>null のような操作
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>libargon なしでの argon2i(d)</title>
   <para>
    PHP が libargon
    を使わずにビルドされた場合、<function>password_hash</function> 関数は sodium
    拡張モジュールの argon2i と argon2id を使った実装を使うようになります。
   </para>
  </sect3>

 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
