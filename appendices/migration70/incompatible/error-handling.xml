<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2485376b5b3d6b40e5c0d4e198ab5ff2a142425c Maintainer: takagi Status: ready -->

<sect2 xml:id="migration70.incompatible.error-handling">
 <title>エラーや例外の取り扱いの変更</title>

 <para>
  fatal error や recoverable fatal error の多くが、PHP 7 では例外に変換されるようになりました。
  これらの例外は <classname>Error</classname> クラスを継承したもので、
  このクラスは <classname>Throwable</classname> インターフェイスを実装しています。
  この新しいインターフェイスを、すべての例外が実装しています。
 </para>

 <para>
  エラーではなく例外がスローされるようになるということは、自作のエラーハンドラは呼び出されなくなるということです
  (<classname>Error</classname> 例外をキャッチしなかった場合は、fatal エラーが発生します)。
 </para>

 <para>
  PHP 7 におけるエラーハンドリングの詳細な説明は
  <link linkend="language.errors.php7">PHP 7 のエラー</link> を参照ください。
  この移行ガイドでは、下位互換性のない変更点を列挙するだけにとどめます。
 </para>

 <sect3 xml:id="migration70.incompatible.error-handling.set-exception-handler">
  <title>
   <function>set_exception_handler</function> が常に
   <classname>Exception</classname> オブジェクトを受け取るとは限らない
  </title>

  <para>
   <function>set_exception_handler</function>
   で登録した例外ハンドラの実装で <classname>Exception</classname>
   型を宣言している場合は、
   <classname>Error</classname> オブジェクトがスローされると fatal エラーが発生します。
  </para>

  <para>
   PHP 5 と PHP 7 の両方で動くハンドラを書く場合は、ハンドラで型宣言をしてはいけません。
   PHP 5 で動いていたコードを移行する際に、そのコードが PHP 7 でだけ動けばいいのなら、
   <classname>Exception</classname> 型で宣言している部分を単純に
   <classname>Throwable</classname> 型に置換するだけでかまいません。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// PHP 5 でのこの実装は、そのままでは PHP 7 では動きません
function handler(Exception $e) { /* ... */ }
set_exception_handler('handler');

// PHP 5 と 7 の両方で動きます
function handler($e) { /* ... */ }

// PHP 7 でだけ動きます
function handler(Throwable $e) { /* ... */ }
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.constructors">
  <title>内部のコンストラクタは、失敗したときに常に例外をスローする</title>

  <para>
   これまでは、コンストラクタの処理が失敗した際に、
   &null; を返したり使用不能なオブジェクトを返したりする内部クラスがありました。
   PHP 7 では、同様の場合に
   <classname>Exception</classname> をスローするようになりました。
   ユーザー定義のクラスでは以前からそうすべきだとされていたことです。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.parse">
  <title>パースエラーが発生すると <classname>ParseError</classname> をスローする</title>

  <para>
   パースエラーが発生すると <classname>ParseError</classname> オブジェクトをスローするようになりました。
   <function>eval</function> のエラーハンドリングをする際には、&catch;
   ブロックを用意してこのエラーを処理しなければいけません。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.strict">
  <title>E_STRICT 通知の深刻度の変更</title>

  <para>
   すべての <constant>E_STRICT</constant> 通知が、改めて別のレベルに移動しました。
   定数 <constant>E_STRICT</constant> はそのまま残っているので、
   <literal>error_reporting(E_ALL|E_STRICT)</literal> のような呼び出しがエラーになることはありません。
  </para>
  <para>
   <table>
    <title><constant>E_STRICT</constant> 通知の深刻度の変更</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>状況</entry>
        <entry>新しいレベル / 挙動</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Indexing by a resource</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Abstract static methods</entry>
        <entry>通知は削除され、エラーにはならない</entry>
       </row>
       <row>
        <entry>"Redefining" a constructor</entry>
        <entry>通知は削除され、エラーにはならない</entry>
       </row>
       <row>
        <entry>Signature mismatch during inheritance</entry>
        <entry><constant>E_WARNING</constant></entry>
       </row>
       <row>
        <entry>Same (compatible) property in two used traits</entry>
        <entry>通知は削除され、エラーにはならない</entry>
       </row>
       <row>
        <entry>Accessing static property non-statically</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Only variables should be assigned by reference</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Only variables should be passed by reference</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Calling non-static methods statically</entry>
        <entry><constant>E_DEPRECATED</constant></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
