<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d987f5fea44af3e2b2740bebc9700903cdfcf1f6 Maintainer: takagi Status: ready -->

<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新機能</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>nullable な型</title>

  <para>
   パラメータや戻り値の型宣言で nullable 指定ができるようになりました。
   型の前にクエスチョンマークをつけると、nullable であることを指定できます。
   nullable 指定をすると、指定した型だけでなく &null; も渡せるようになります。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturnA(): ?string
{
    return 'elePHPant';
}

var_dump(testReturnA());

function testReturnB(): ?string
{
    return null;
}

var_dump(testReturnB());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(9) "elePHPant"
NULL
string(9) "elePHPant"
NULL
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>void 関数</title>

  <para>
   戻り値の型として <type>void</type> が導入されました。戻り値の型を void
   と宣言した関数は、関数内での return 文を省略するか、あるいは空の return を使う必要があります。
   void 関数から &null; を返すことはできません。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function swap(&$left, &$right): void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   void 関数の戻り値を使おうとした場合はその値は &null; と評価されます。
   警告は発生しません。警告を発生させると、一般的な高階関数の利用にも影響するからです。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>対称的な配列の分解</title>

  <para>
   配列の短縮構文 (<literal>[]</literal>) を使って、
   代入用に配列の値を取り出せるようになりました (<literal>foreach</literal> でも使えます)。
   これは、<function>list</function> の代替として使えます
   (<function>list</function> もまだ使えます)。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// list() 形式
list($id1, $name1) = $data[0];

// [] 形式
[$id1, $name1] = $data[0];

// list() 形式
foreach ($data as list($id, $name)) {
    // $id と $name を使う処理をここに書きます
}

// [] 形式
foreach ($data as [$id, $name]) {
    // $id と $name を使う処理をここに書きます
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>クラス定数のアクセス範囲指定</title>

  <para>
   クラス定数のアクセス範囲を指定できるようになりました。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title><type>iterable</type> 擬似型</title>

  <para>
   新しい擬似型 (<type>callable</type> と同じような型) である
   <type>iterable</type> が導入されました。
   パラメータおよび戻り値の型指定で使うことができます。
   配列か、あるいは <classname>Traversable</classname>
   インターフェイスを実装したオブジェクトを受け付けるようになります。
   派生型に貸しては、子クラスのパラメータの型が、
   親クラスの <type>array</type> や <classname>Traversable</classname>
   を拡張して <type>iterable</type> に広げることができます。
   戻り値の型に関しては、親クラスの <type>iterable</type> 型指定を子クラスで
   配列あるいはオブジェクト (<classname>Traversable</classname> を実装したもの)
   に絞り込むことができます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>例外処理における複数の例外の catch</title>

  <para>
   ひとつの catch ブロックで複数の例外を扱えるようになりました。
   パイプ文字 (<literal>|</literal>) を使って指定します。
   これは、異なるクラス階層に由来する異なる例外を同じように処理したい場合に有用です。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // 何かのコード
} catch (FirstException | SecondException $e) {
    // FirstException と SecondException をこのブロックで処理します
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title><function>list</function> におけるキーのサポート</title>

  <para>
   <function>list</function> (あるいはその短縮版である <literal>[]</literal> 構文)
   の内部でキーを指定できるようになりました。
   つまり、キーが整数でなかったりシーケンシャルでなかったりした場合でも、
   配列の値を取り出せるようになったということです。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// list() 形式
list("id" => $id1, "name" => $name1) = $data[0];

// [] 形式
["id" => $id1, "name" => $name1] = $data[0];

// list() 形式
foreach ($data as list("id" => $id, "name" => $name)) {
    // $id と $name を使う処理をここに書きます
}

// [] 形式
foreach ($data as ["id" => $id, "name" => $name]) {
    // $id と $name を使う処理をここに書きます
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>負の文字列オフセットのサポート</title>

  <para>
   <link linkend="book.strings">文字列操作関数</link>
   のうちオフセット指定のできるものすべてについて、負のオフセットを指定できるようになりました。
   <literal>[]</literal> や <literal>{}</literal> による
   <link linkend="language.types.string.substr">文字列への文字単位のアクセス</link>
   についても同様です。
   負のオフセットは、文字列の末尾からのオフセットと解釈されます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>

  <para>
   文字列や配列に対する負のオフセットが、文字列内での単純な変数パース構文においても使えるようになりました。
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$string = 'bar';
echo "The last character of '$string' is '$string[-1]'.\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
The last character of 'bar' is 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>ext/openssl における AEAD のサポート</title>

  <para>
   <function>openssl_encrypt</function> および
   <function>openssl_decrypt</function> の追加のパラメータで、
   AEAD (GCM モードおよび CCM モード) をサポートするようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title><methodname>Closure::fromCallable</methodname> による callables から <classname>Closure</classname> への変換</title>

  <para>
   <classname>Closure</classname> クラスに新しいstaticメソッドが追加されました。
   <type>callable</type> を、簡単に
   <classname>Closure</classname> オブジェクトに変換できるようにするものです。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('some value');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "some value"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>非同期シグナルハンドリング</title>

  <para>
   新しい関数 <function>pcntl_async_signals</function>
   が追加されました。これは、tick を使わない非同期シグナルハンドリングを有効にするものです
   (tick は相当大きなオーバーヘッドになります)。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // 非同期シグナルを有効にします

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>ext/curl における HTTP/2 サーバープッシュのサポート</title>

  <para>
   CURL 拡張モジュールがサーバープッシュに対応するようになりました
   (curl バージョン 7.46 以降が必要です)。
   <function>curl_multi_setopt</function> 関数に新しい定数
   <constant>CURLMOPT_PUSHFUNCTION</constant> を指定すれば、この機能を使えます。
   また、定数
   <constant>CURL_PUSH_OK</constant> と <constant>CURL_PUSH_DENY</constant>
   も新たに追加されました。
   これらは、サーバープッシュコールバックの実行を許可したり拒否したりするものです。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.stream-context-options">
  <title>ストリームコンテキストオプション</title>

  <para>
   <link linkend="context.socket.tcp_nodelay">tcp_nodelay</link>
   ストリームコンテキストオプションが追加されました。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
