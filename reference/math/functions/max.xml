<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 761d72245071f89a626903c9bcdc6aaff1252d54 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi,mumumu -->
<refentry xml:id="function.max" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>max</refname>
  <refpurpose>最大値を返す</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>max</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <simpara>代替のシグネチャ (名前付き引数をサポートしていません):</simpara>
  <methodsynopsis>
   <type>mixed</type><methodname>max</methodname>
   <methodparam><type>array</type><parameter>value_array</parameter></methodparam>
  </methodsynopsis>
  <para>
   パラメータとして配列をひとつだけ渡した場合は、<function>max</function>
   は配列の中で最も大きい数値を返します。
   ふたつ以上のパラメータを指定した場合は、<function>max</function>
   はそれらの中で最も大きいものを返します。
  </para>
  <note>
   <para>
    異なる型の値を比較する際には、<link linkend="language.operators.comparison">
    標準の比較ルール</link>に従います。
    たとえば、数値形式でない <type>string</type> を
    <type>int</type> と比較するときには、数値 <literal>0</literal> と評価します。
    しかし、数値形式でない <type>string</type> どうしを比較するときには、アルファベット順で評価します。
    返される値は、何も変換をしていない、元の型の値となります。
   </para>
  </note>
  <caution>
   <simpara>
    異なる型の値を引数として渡す際には注意しましょう。
    <function>max</function> が予期せぬ結果を返す可能性があるからです。
   </simpara>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       任意の <link linkend="language.operators.comparison">比較可能な</link> 値。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       任意の <link linkend="language.operators.comparison">比較可能な</link> 複数の値。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value_array</parameter></term>
     <listitem>
      <para>
       値を含んだ配列。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>max</function> は、パラメータとして渡した値の中で、標準の比較ルールに従って最大になるものを返します。
   異なる型で同じ値と評価される複数の値 (<literal>0</literal> と <literal>'abc'</literal> など)
   があった場合は、関数に最初に渡されたほうを返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <function>max</function> に空の配列を渡すと、
   <classname>ValueError</classname> をスローします。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>max</function> は失敗した場合に、
       <classname>ValueError</classname> をスローするようになりました。
       これより前のバージョンでは、&false; を返し、
       <constant>E_WARNING</constant> レベルのエラーが発生していました。
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <link linkend="migration80.incompatible.core.string-number-comparision">
       文字列と数値の比較方法が変更された</link> ため、
       数値と非数値形式の文字列を比較した場合に、引数の順番に応じて異なる値を返さなくなりました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>max</function> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo max(2, 3, 1, 6, 7), PHP_EOL;  // 7
echo max(array(2, 4, 5)), PHP_EOL; // 5

// -1 と 0 の比較なので、'hello' のほうが大きくなります
echo max('hello', -1), PHP_EOL;    // hello

// 長さが異なる複数の配列を渡すと、いちばん長い配列を返します
$val = max(array(2, 2, 2), array(1, 1, 1, 1)); // array(1, 1, 1, 1)
var_dump($val);

// 同じ長さの複数の配列を渡すと、max はその要素を左から
// 辞書順に比較します。この例では 2 == 2 ですが 5 > 4 となります
$val = max(array(2, 4, 8), array(2, 5, 1)); // array(2, 5, 1)
var_dump($val);

// 配列と配列でない値が渡された場合、常に
// 配列が最大と判定されます。
$val = max('string', array(2, 5, 7), 42);   // array(2, 5, 7)
var_dump($val);

// 一方の値が NULL や boolean の場合、それを他の値と比較するときには、
// もう一方の値の型が何であるかにかかわらず、FALSE < TRUE というルールを使います。
// 以下の例では、-10 は TRUE と評価されます。
$val = max(-10, FALSE); // -10
var_dump($val);

// 一方 0 は FALSE と評価されるので、TRUE よりは小さいとみなされます。
$val = max(0, TRUE); // TRUE
var_dump($val);
?>
]]>
    </programlisting>
    </example> 
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>min</function></member>
    <member><function>count</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
