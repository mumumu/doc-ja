<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 79c0572a57cd5a84e9b527b40b0e07c0390e9cea Maintainer: mumumu Status: ready -->
<refentry xml:id="reflectionproperty.getsettabletype" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionProperty::getSettableType</refname>
  <refpurpose>set フックのパラメータの型を返す</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionProperty">
   <modifier>public</modifier> <type class="union"><type>ReflectionType</type><type>null</type></type><methodname>ReflectionProperty::getSettableType</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   <literal>set</literal> フックに指定されたパラメータの型を返します。
   <literal>set</literal> フックが定義されていない場合、
   <methodname>ReflectionProperty::getType</methodname> と同じ振る舞いをします。
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simplelist>
   <member>
    プロパティに set 可能な型にマッチする <classname>ReflectionType</classname>
    のインスタンスを返します。
   </member>
   <member>
    明示的に型を指定した <literal>set</literal> フックが存在する場合、
    その型を返します。
   </member>
   <member>
    フックが型を指定しない場合、またはフックが存在しない場合、
    プロパティに指定された型を返します。
    つまり、<methodname>ReflectionProperty::getType</methodname> と同じ動きをします。
    プロパティに型が指定されていない場合、&null; を返す可能性があります。
   </member>
   <member>
    プロパティが仮想プロパティで、かつ <literal>set</literal> フックが存在しない場合、
    <literal>never</literal> に対応する <classname>ReflectionType</classname>
    を返します。
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="reflectionproperty.getsettabletype.example.basic">
   <title><methodname>ReflectionProperty::getSettableType</methodname> の例</title>
   <programlisting role="php">
<![CDATA[
<?php

class Example
{
    public string $basic {
        set => strtolower($value);
    }

    public string $wider {
        set(string|Stringable $value) => (string) $value;
    }

    public string $virtual {
        get => 'Do not change this';
    }

    public $untyped = 'silly';
}

$rClass = new \ReflectionClass(Example::class);

var_dump($rClass->getProperty('basic')->getSettableType());
var_dump($rClass->getProperty('wider')->getSettableType());
var_dump($rClass->getProperty('virtual')->getSettableType());
var_dump($rClass->getProperty('untyped')->getSettableType());

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(ReflectionNamedType)#3 (0) {
}
object(ReflectionUnionType)#2 (0) {
}
object(ReflectionNamedType)#3 (0) {
}
NULL
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>ReflectionProperty::getType</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
