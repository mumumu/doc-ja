<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8d09722b6d95d2545d5a4c9415c6955efc3a464e Maintainer: takagi Status: ready -->
<refentry xml:id="phardata.copy" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::copy</refname>
  <refpurpose>tar/zip アーカイブ内のファイルを、同じアーカイブ内で別の新しいファイルとしてコピーする</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PharData">
   <modifier>public</modifier> <type>true</type><methodname>PharData::copy</methodname>
   <methodparam><type>string</type><parameter>from</parameter></methodparam>
   <methodparam><type>string</type><parameter>to</parameter></methodparam>
  </methodsynopsis>

  <para>
   phar アーカイブ内のファイルを、そのアーカイブ内で別の新しいファイルとしてコピーします。
   これは、phar ストリームラッパーでの <function>copy</function>
   と同等の操作をオブジェクト指向で行うものです。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>from</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>to</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.true.always;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   コピー元のファイルが存在しない、コピー先のファイルが既に存在する、
   書き込みアクセスが無効になっている、どちらかのファイルのオープンに失敗した、
   あるいはコピー元のファイルの読み込みに失敗した場合に
   <classname>UnexpectedValueException</classname> をスローします。
   変更内容の phar への書き込みに失敗した場合は
   <classname>PharException</classname> をスローします。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>PharData::copy</function> の例</title>
    <para>
     この例は、<function>PharData::copy</function> の使用法のほかに
     それと同等の操作をストリームラッパーで行う方法を示すものです。
     これらの方式の最大の違いはエラー処理です。
     PharData のすべてのメソッドは例外をスローしますが、ストリームラッパーの場合は
     <function>trigger_error</function> を使用します。
    </para>
    <programlisting role="php">
<![CDATA[
<?php

try {
    $phar = new PharData('myphar.tar');

    $phar['a'] = 'hi';
    $phar->copy('a', 'b');

    echo $phar['b']; // 出力は "phar://myphar.tar/b"
} catch (Exception $e) {
    // エラー処理
}

// 上のコードと同等の処理をストリームラッパーで行う例。
// エラー時には例外ではなく E_WARNINGS が発生します
copy('phar://myphar.tar/a', 'phar//myphar.tar/c');
echo file_get_contents('phar://myphar.tar/c'); // 出力は "hi"

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
