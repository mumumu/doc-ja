<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: takagi Status: ready -->
<refentry xml:id="evembed.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EvEmbed::__construct</refname>
  <refpurpose>EvEmbed オブジェクトを作る</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier>
   <methodname>EvEmbed::__construct</methodname>
   <methodparam>
    <type>object</type>
    <parameter>other</parameter>
   </methodparam>
   <methodparam choice="opt">
    <type>callable</type>
    <parameter>callback</parameter>
   </methodparam>
   <methodparam choice="opt">
    <type>mixed</type>
    <parameter>data</parameter>
   </methodparam>
   <methodparam choice="opt">
    <type>int</type>
    <parameter>priority</parameter>
   </methodparam>
  </constructorsynopsis>
  <para>
   これは高度なウォッチャー型で、あるイベントループを別のイベントループに埋め込むことができます。
   現在は、埋め込みループに対応しているのは IO イベントだけです。
   他の型のウォッチャーを使うと、処理が遅延したり不正確な動きになったりする可能性があるので、
   使ってはいけません。
  </para>
  <para>
   詳細は、
   <link
  xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_embed_code_when_one_backend_">
  libev のドキュメント</link>
   を参照ください。
  </para>
  <para>
   このウォッチャーは、<emphasis>BSD</emphasis> システムで
   <literal>kqueue</literal> が使えないときにも大量のソケットを処理できるようにするのに便利です。
   以下の例を参照ください。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>other</parameter>
    </term>
    <listitem>
     <para>
      <classname>EvLoop</classname> のインスタンス。
      埋め込むループです。これは埋め込み可能なものでなければいけません
      (<methodname>Ev::embeddableBackends</methodname> を参照ください)。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>callback</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.watcher-callbacks">ウォッチャーのコールバック</link>
      を参照ください。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>data</parameter>
    </term>
    <listitem>
     <para>
      このウォッチャーに関連づけるカスタムデータ。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>priority</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-pri">ウォッチャーの優先度</link>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
 <example>
   <title>kqueue バックエンドで作ったループをデフォルトのループに埋め込む例</title>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * kqueue が使えるかどうかを調べ、ソケットで使う kqueue バックエンドを作ります
 * (通常は、どんな kqueue 実装でも動きます)。
 * kqueue/socket-only イベントループを loop_socket に格納します
 * (EVFLAG_NOENV も使えます)。
 *
 * この例を流用しました
 * http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9
 */
$loop        = EvLoop::defaultLoop();
$socket_loop = NULL;
$embed       = NULL;

if (Ev::supportedBackends() & ~Ev::recommendedBackends() & Ev::BACKEND_KQUEUE) {
    if (($socket_loop = new EvLoop(Ev::BACKEND_KQUEUE))) {
        $embed = new EvEmbed($loop);
    }
}

if (!$socket_loop) {
    $socket_loop = $loop;
}

// これで、すべてのソケットに対して $socket_loop を使い、それ以外については $loop を使うようになりました
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <methodname>Ev::embeddableBackends</methodname>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
