<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: takagi Status: ready -->
<!-- Credits: hirokawa,haruki,mumumu -->
<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>正規表現検索を行い、コールバック関数を使用して置換を行う</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>array</type><type>null</type></type><methodname>preg_replace_callback</methodname>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>pattern</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   この関数の動作は、ほぼ <function>preg_replace</function> と同じですが、
   <parameter>replacement</parameter> の代わりに
   <parameter>callback</parameter> を指定するところが異なります。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       検索するパターン。
       文字列あるいは文字列の配列のいずれかとなります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       このコールバック関数は、検索対象文字列でマッチした要素の配列が指定されて
       コールされます。このコールバック関数は、置換後の文字列を返す必要があります。
       コールバックのシグネチャは、次のとおりです。
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>array</type><parameter>matches</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       <function>preg_replace_callback</function> 用の
       <parameter>callback</parameter> 関数が、
       ひとつの場所だけで必要となることがあります。
       そんな場合は、
       <link linkend="functions.anonymous">無名関数</link>
       を使って宣言した無名関数を
       <function>preg_replace_callback</function> のコール時に使用します。
       このようにすることにより、コールに関するすべての情報を 1 ヶ所に集め、
       他の場所で使用されないコールバック関数名で関数の名前空間を
       汚染しないようにすることができます。
      </para>
      <para>
       <example>
        <title>
         <function>preg_replace_callback</function> と無名関数
        </title>
         <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
/* Unix 方式のコマンドラインフィルタです。
 * 段落の冒頭の大文字を、小文字に変換します。*/
$fp = fopen("php://stdin", "r") or die("標準入力から読み込めません");
while (!feof($fp)) {
    $line = fgets($fp);
    $line = preg_replace_callback(
        '|<p>\s*\w|',
        function ($matches) {
            return strtolower($matches[0]);
        },
        $line
    );
    echo $line;
}
fclose($fp);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       文字列あるいは文字列の配列で、
       検索および置換の対象となる文字列を指定します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       <parameter>subject</parameter> 文字列における
       各パターンの最大置換回数。デフォルトは
       <literal>-1</literal> (無制限) です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       指定した場合は、置換を行った回数がここに格納されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> には、
       <constant>PREG_OFFSET_CAPTURE</constant> と
       <constant>PREG_UNMATCHED_AS_NULL</constant> の組み合わせが指定できます。
       これは matches 配列のフォーマットに影響します。
       詳細は <function>preg_match</function> 関数の説明を参照ください。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace_callback</function> は、
   <parameter>subject</parameter> が配列の場合には配列を、
   それ以外の場合は文字列を返します。
   エラー時の戻り値は &null; となります。
  </para>
  <para>
   マッチするものが見つかった場合は新しい subject
   を返し、それ以外の場合はもとの <parameter>subject</parameter>
   をそのまま返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pcre.pattern.warning;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        パラメータ <parameter>flags</parameter> が追加されました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>preg_replace_callback</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
// このテキストは 2002 に使われていたものなのですが、
// これを 2003 年対応の日付に変更したいのです
$text = "エイプリルフールの日付は 04/01/2002 です\n";  
$text.= "この前のクリスマスの日付は 12/24/2001 でした\n";  
// コールバック関数
function next_year($matches)
{
  // 通常は、$matches[0] がマッチした全体を表します。
  // $matches[1] は、マッチした中で、パターン内の最初の '(...)'
  // にあてはまる部分を表します。それ以降も同様です。
  return $matches[1].($matches[2]+1);
}
echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "next_year",
            $text);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
エイプリルフールの日付は 04/01/2003 です
この前のクリスマスの日付は 12/24/2002 でした
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     カプセル化された BB code を処理するための、
     <function>preg_replace_callback</function> での再帰構造の使用
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$input = "通常の位置 [indent] 字下げ [indent] もっと字下げ [/indent] 字下げ [/indent] 通常の位置"; 

function parseTagsRecursive($input)
{

    $regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';

    if (is_array($input)) {
        $input = '<div style="margin-left: 10px">'.$input[1].'</div>';
    }

    return preg_replace_callback($regex, 'parseTagsRecursive', $input);
}

$output = parseTagsRecursive($input);

echo $output;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">PCRE のパターン</link></member>
    <member><function>preg_replace_callback_array</function></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_last_error</function></member>
    <member><link linkend="functions.anonymous">無名関数</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
