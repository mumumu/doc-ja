<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b6c220c748034c8db2d007ef42b74b212ac2f1cd Maintainer: mumumu Status: ready -->

<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist>

  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <simpara>
     ペイロードの圧縮を有効または無効にします。
     有効にした場合、ある閾値(現状2000バイト)より長いアイテムは、
     ストレージ内では圧縮され、取得時に透過的に伸長されます。
     閾値は ini 設定
     <link linkend="ini.memcached.compression-threshold">memcached.compression_threshold</link>
     で調整できます。
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &true;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-compression-type">
   <term><constant>Memcached::OPT_COMPRESSION_TYPE</constant></term>
   <listitem>
    <simpara>
     圧縮を有効にする場合に、利用する圧縮アルゴリズムを指定します。
     有効な値は、<constant>Memcached::COMPRESSION_FASTLZ</constant>,
     <constant>Memcached::COMPRESSION_ZLIB</constant>,
     <constant>Memcached::COMPRESSION_ZSTD</constant> です。
    </simpara>
    <para>型: <type>int</type>, デフォルト: <constant>Memcached::COMPRESSION_FASTLZ</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-fastlz">
   <term><constant>Memcached::COMPRESSION_FASTLZ</constant></term>
   <listitem>
    <simpara>
     FASTLZ 圧縮アルゴリズム
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-zlib">
   <term><constant>Memcached::COMPRESSION_ZLIB</constant></term>
   <listitem>
    <simpara>ZLIB 圧縮アルゴリズム</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-zstd">
   <term><constant>Memcached::COMPRESSION_ZSTD</constant></term>
   <listitem>
    <simpara>
     ZSTD 圧縮アルゴリズム
    </simpara>
    <simpara>
     Memcached 3.3.0 以降で利用可能です  
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-compression-level">
   <term><constant>Memcached::OPT_COMPRESSION_LEVEL</constant></term>
   <listitem>
    <simpara>
     圧縮が有効な場合に、圧縮レベルを指定します。
    </simpara>
    <simplelist>
     <member><constant>Memcached::COMPRESSION_FASTLZ</constant> は圧縮レベルをサポートしていません</member>
     <member><constant>Memcached::COMPRESSION_ZSTD</constant>: 最小レベルは <literal>-22</literal> で、最大レベルは <literal>22</literal> です</member>
     <member><constant>Memcached::COMPRESSION_ZLIB</constant>: 最小レベルは <literal>0</literal> で、最大レベルは <literal>9</literal> です</member>
    </simplelist>
    <para>型: <type>int</type>, デフォルト: <literal>3</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <simpara>
     スカラーでない値をシリアライズする際に使う、シリアライザを指定します。
     有効な値は <constant>Memcached::SERIALIZER_PHP</constant>,
     <constant>Memcached::SERIALIZER_IGBINARY</constant>,
     <constant>Memcached::SERIALIZER_JSON</constant>,
     <constant>Memcached::SERIALIZER_JSON_ARRAY</constant>,
     <constant>Memcached::SERIALIZER_MSGPACK</constant> です。
    </simpara>
    <para>
     型: <type>int</type>, デフォルト: <constant>Memcached::SERIALIZER_IGBINARY</constant> が有効な場合は、<constant>Memcached::SERIALIZER_IGBINARY</constant>。
    そうではなく、<constant>Memcached::SERIALIZER_MSGPACK</constant> が有効な場合は、
    <constant>Memcached::SERIALIZER_MSGPACK</constant>。
    いずれも有効でない場合は、
    <constant>Memcached::SERIALIZER_PHP</constant>。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>デフォルトのPHPのシリアライザ</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <simpara>
     <link linkend="book.igbinary">igbinary</link> シリアライザです。
     PHP のデータ構造を、テキスト表現の代わりにコンパクトなバイナリ表現で保存します。
     その結果、保存スペースの節約と処理時間の短縮に繋がります。
    </simpara>
    <simpara>
     このシリアライザは、memcached が <option>--enable-memcached-igbinary</option>
     オプションを使い、<link linkend="intro.igbinary">igbinary</link>
     拡張モジュールをロードした場合にのみサポートされます。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>JSON シリアライザ。このシリアライザは、JSON をオブジェクトにアンシリアライズします</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json-array">
   <term><constant>Memcached::SERIALIZER_JSON_ARRAY</constant></term>
   <listitem>
    <simpara>
     JSON 配列のシリアライザです。
     このシリアライザは、JSON を連想配列としてアンシリアライズします。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-msgpack">
   <term><constant>Memcached::SERIALIZER_MSGPACK</constant></term>
   <listitem>
    <simpara>
     <link xlink:href="&url.pecl.package;msgpack">MessagePack</link> シリアライザです
    </simpara>
    <simpara>
     このシリアライザは、memcached が <option>--enable-memcached-msgpack</option>
     オプションを使い、<literal>msgpack</literal>
     拡張モジュールをロードした場合にのみサポートされます。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <simpara>
     これを使うと、アイテムのキーに「ドメイン」を作成できます。
     ここで指定した値がキーの名前の先頭に付きます。
     <literal>128</literal> 文字より長くはできず、
     ここで指定した値の分だけキーに指定できる長さが小さくなります。
     プレフィックスが付くのはアイテムのキーだけであり、
     サーバーのキーには付きません。
    </simpara>
    <para>型: <type>string</type>, デフォルト: <literal>""</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <simpara>
     アイテムのキーに対するハッシュアルゴリズムを指定します。
     有効な値は <constant>Memcached::HASH_<replaceable>*</replaceable></constant>
     定数にあります。
     ハッシュアルゴリズムは、それぞれ利点と欠点があります。
     よくわからない、または気にしない場合は、デフォルト値を指定しましょう
    </simpara>
    <para>型: <type>int</type>, デフォルト: <constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>The default (Jenkins one-at-a-time) キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>MD5 キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>CRC アイテムキーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>FNV1_64 キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>FNV1_64A キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>FNV1_32 キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>FNV1_32A キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>Hsieh キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>Murmur キーハッシュアルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <simpara>
     アイテムのキーをサーバーに分散する方法を指定します。
     現状サポートされている方法は、Module ベースと、
     コンシステント・ハッシュです。
     コンシステント・ハッシュの方がデータをうまく分散するので、
     最小のキャッシュロスでクラスタにサーバーを追加できます
    </simpara>
    <para>型: <type>int</type>, デフォルト: <constant>Memcached::DISTRIBUTION_MODULA</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>Moduloベースのキー分散アルゴリズム</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>コンシステント・ハッシュ キー分散アルゴリズム(libketama ベース)</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-virtual-bucket">
   <term><constant>Memcached::DISTRIBUTION_VIRTUAL_BUCKET</constant></term>
   <listitem>
    <simpara>
     Virtual Bucket hashing キー分散アルゴリズム(vbucket とも呼びます)
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>
     libketama 風の挙動との互換性を有効あるいは無効にします。
     有効にすると、アイテムのキーのハッシュアルゴリズムは MD5、
     そして分散方式は重み付きコンシステント・ハッシュになります。
     これを使うと、他の libketama ベースのクライアント (Python や Ruby など)
     を同じサーバー設定で使え、キーも透過的にアクセスできるようになるので有用です。
    </para>
    <note>
     <para>
      コンシステント・ハッシュを使う場合は、
      このオプションを有効にすることを強く推奨します。
      将来のリリースでは、デフォルトでこのオプションは有効になるかもしれません。
     </para>
    </note>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-hash">
   <term><constant>Memcached::OPT_LIBKETAMA_HASH</constant></term>
   <listitem>
    <simpara>
     ホストのマッピングに用いるハッシュアルゴリズムを指定します。
    </simpara>
    <para>型: <type>int</type></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-keepalive">
   <term><constant>Memcached::OPT_TCP_KEEPALIVE</constant></term>
   <listitem>
    <simpara>
     TCP の keep alive を有効にします。
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <simpara>
     バッファ入出力を有効あるいは無効にします。
     バッファ入出力を有効にすると、ストレージへのコマンドを送信する代わりに
     「バッファ」に向けるようになります。
     データを取得するアクションを実行すると、このバッファをリモート接続に送信します。
     接続を終了したり閉じたりしたときも、バッファに入ったデータをリモート接続に送信します。
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <simpara>
     バイナリプロトコルを有効にします。
     接続を行う際に、このオプションは設定できない点に注意してください。
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <simpara>
     非同期 I/O を有効にするか、無効にするかを指定します。
     これを有効にすると、storage 関数に最速で転送できます。
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-noreply">
   <term><constant>Memcached::OPT_NOREPLY</constant></term>
   <listitem>
    <simpara>
     ストレージへのコマンド
     (set, add, replace, append, prepend, delete, increment, decrement など)
     の実行結果を無視するか、しないかを指定します。
     ストレージへのコマンドは、送信された後、応答を待つのに時間を使いません。
     (応答がない場合もあります)
     <function>Memcached::get</function> のように、
     データを取得するコマンドは、この設定による影響を受けません。 
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <simpara>
     ソケットに接続する際に no-delay 機能を有効にしたり無効にしたりします
     (環境によっては高速になる場合があります)
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <simpara>ソケットの送信バッファの最大長をバイト単位で指定します</simpara>
    <para>
     型: <type>int</type>, デフォルト: platform/kernel の設定によって変わります
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <simpara>ソケットの受信バッファの最大のバイト数</simpara>
    <para>
     型: <type>int</type>, デフォルト: platform/kernel の設定によって異なります
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     ノンブロッキングモードの際、
     ソケット接続のタイムアウトをミリ秒単位で指定します
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>1000</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     接続が失敗した場合に、再試行まで待つ時間を秒単位で指定します。
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>2</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-dead-timeout">
   <term><constant>Memcached::OPT_DEAD_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     死んでいるサーバーに再試行まで待つ時間を秒単位で指定します。
     <literal>0</literal> は、リトライを行わないということです
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     ソケットの送信タイムアウトを、ミリ秒単位で指定します。
     ノンブロッキングI/O を使えない場合、
     この設定によってデータの送信タイムアウトを利用できます
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     ソケットの読み取りタイムアウトを、ミリ秒単位で指定します。
     ノンブロッキングI/O を使えない場合、
     この設定によってデータの読み取りタイムアウトを利用できます
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <simpara>接続ポーリングのタイムアウト。ミリ秒単位</simpara>
    <para>型: <type>int</type>, デフォルト: <literal>1000</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <simpara>DNS lookup のキャッシュを有効にするか、無効にするかを指定します</simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <simpara>
     サーバーへの接続試行が、失敗する回数の上限を指定します。
     継続して接続が失敗すると、サーバーはリストから削除されます
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>5</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-timeout-limit">
   <term><constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant></term>
   <listitem>
    <simpara>
     サーバーへの接続試行のタイムアウト値を指定します。
     継続して接続がタイムアウトすると、サーバーはリストから削除されます
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-auto-eject-hosts">
   <term><constant>Memcached::OPT_AUTO_EJECT_HOSTS</constant></term>
   <listitem>
    <para>
     無効にしたサーバーを一覧から削除します。
     <constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant> や
     <constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant> と一緒に使います。
    </para>
    <note>
     <para>
      このオプションは、
      <constant>Memcached::OPT_REMOVE_FAILED_SERVERS</constant> に置き換えられました。
     </para>
    </note>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-verify-key">
   <term><constant>Memcached::OPT_VERIFY_KEY</constant></term>
   <listitem>
    <simpara>
     memcached による、キーの検証を有効にします
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-use-udp">
   <term><constant>Memcached::OPT_USE_UDP</constant></term>
   <listitem>
    <simpara>
     TCP の代わりに UDP を使います
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-number-of-replicas">
   <term><constant>Memcached::OPT_NUMBER_OF_REPLICAS</constant></term>
   <listitem>
    <simpara>
     各アイテムについて、ここで指定した数のレプリカを異なるサーバーに保存します
    </simpara>
    <para>型: <type>int</type>, デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-randomize-replica-reads">
   <term><constant>Memcached::OPT_RANDOMIZE_REPLICA_READS</constant></term>
   <listitem>
    <simpara>
     読み取り専用のレプリカをランダムに選びます
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-remove-failed-servers">
   <term><constant>Memcached::OPT_REMOVE_FAILED_SERVERS</constant></term>
   <listitem>
    <simpara>
     無効にしたサーバーを一覧から削除します。
     <constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant> や
     <constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant> と一緒に使います。
    </simpara>
    <para>型: <type>bool</type>, デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <simpara>igbinary シリアライザのサポートを利用可能にするかを指示します</simpara>
    <para>型: <type>bool</type></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <simpara>JSON シリアライザのサポートを利用可能にするかを指示します</simpara>
    <para>型: <type>bool</type></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-msgpack">
   <term><constant>Memcached::HAVE_MSGPACK</constant></term>
   <listitem>
    <simpara>MessagePack シリアライザのサポートを利用可能にするかを指示します</simpara>
    <para>型: <type>bool</type></para>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-zstd">
   <term><constant>Memcached::HAVE_ZSTD</constant></term>
   <listitem>
    <simpara>ZSTD 圧縮アルゴリズムのサポートを利用可能にするかを指示します</simpara>
    <para>型: <type>bool</type>.</para>
    <para>Memcached 3.3.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-encoding">
   <term><constant>Memcached::HAVE_ENCODING</constant></term>
   <listitem>
    <simpara>
     <methodname>Memcached::setEncodingKey</methodname>
     を使って、データの暗号化をサポートするかどうかを指示します
    </simpara>
    <para>型: <type>bool</type>.</para>
    <para>Memcached 3.1.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-session">
   <term><constant>Memcached::HAVE_SESSION</constant></term>
   <listitem>
    <para>型: <type>bool</type></para>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-sasl">
   <term><constant>Memcached::HAVE_SASL</constant></term>
   <listitem>
    <para>型: <type>bool</type>.</para>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-extended">
   <term><constant>Memcached::GET_EXTENDED</constant></term>
   <listitem>
    <para>
     <methodname>Memcached::get</methodname>, <methodname>Memcached::getMulti</methodname>,
     <methodname>Memcached::getMultiByKey</methodname> の返り値に、
     CAS トークン値も一緒に含めることを保証するフラグ
    </para>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para>
     <methodname>Memcached::getMulti</methodname> や
     <methodname>Memcached::getMultiByKey</methodname> の返り値が、
     キーがリクエストされた順に返されることを保証するフラグ。
     キーが存在しない場合、デフォルト値 &null; を取得します。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>操作は成功しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>何らかの形で操作が失敗しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>DNS lookup が失敗しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>ネットワークデータの読み取りに失敗しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>memcached プロトコル内のコマンドが正しくありません</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>クライアント側のエラー</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>サーバー側のエラー</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>ネットワークデータの書き込みに失敗しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>compare-and-swap(CAS) に失敗しました: 保存しようとしたアイテムが、
    最後に取得する前に変更されたということです</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>
     アイテムが格納されなかったが、その原因はエラーではありません。
     これは通常、"add" や "replace" コマンドの要件を満たさなかったか
     あるいはアイテムが削除キューに入っていることを意味します
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>
     このキーのアイテムが ("get" や "cas"
     の操作で) 見つかりませんでした
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>ネットワークデータの読み取りに、一部失敗しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>複数 get している間にエラーが発生しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>サーバーリストが空です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>結果セットの終端です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>システムエラー</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>操作がバッファリングされました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>操作がタイムアウトしました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>無効なキー</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-stored">
   <term><constant>Memcached::RES_STORED</constant></term>
   <listitem>
    <simpara>アイテムが保存されました</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-deleted">
   <term><constant>Memcached::RES_DELETED</constant></term>
   <listitem>
    <simpara>アイテムが削除されました</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-stat">
   <term><constant>Memcached::RES_STAT</constant></term>
   <listitem>
    <simpara>統計情報</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-item">
   <term><constant>Memcached::RES_ITEM</constant></term>
   <listitem>
    <simpara>アイテム</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-not-supported">
   <term><constant>Memcached::RES_NOT_SUPPORTED</constant></term>
   <listitem>
    <simpara>サポートされていません</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-fetch-notfinished">
   <term><constant>Memcached::RES_FETCH_NOTFINISHED</constant></term>
   <listitem>
    <simpara>情報の取得が終わりませんでした</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-marked-dead">
   <term><constant>Memcached::RES_SERVER_MARKED_DEAD</constant></term>
   <listitem>
    <simpara>サーバーが死んだとマークされました</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-stat-key">
   <term><constant>Memcached::RES_UNKNOWN_STAT_KEY</constant></term>
   <listitem>
    <simpara>不明な stat key です</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-invalid-host-protocol">
   <term><constant>Memcached::RES_INVALID_HOST_PROTOCOL</constant></term>
   <listitem>
    <simpara>無効なホストプロトコルです</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-memory-allocation-failure">
   <term><constant>Memcached::RES_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <simpara>メモリの確保に失敗しました</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>ネットワークソケットの作成に失敗しました</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>ペイロードに関するエラー: つまり、値を シリアライズ/復元 したり、圧縮/解凍 することができなかった
ことを示します</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-problem">
   <term><constant>Memcached::RES_AUTH_PROBLEM</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-failure">
   <term><constant>Memcached::RES_AUTH_FAILURE</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-continue">
   <term><constant>Memcached::RES_AUTH_CONTINUE</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-e2big">
   <term><constant>Memcached::RES_E2BIG</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-key-too-big">
   <term><constant>Memcached::RES_KEY_TOO_BIG</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-temporarily-disabled">
   <term><constant>Memcached::RES_SERVER_TEMPORARILY_DISABLED</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-memory-allocation-failure">
   <term><constant>Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で利用可能です</para>
   </listitem>
  </varlistentry>

 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
