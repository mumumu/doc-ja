<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 969a4a70626497a200e4f2ffd883a29cbb228b33 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->

<chapter xml:id="pdo.transactions" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>トランザクションおよび自動コミット</title>
 <para>
  さあ、PDO を使用してデータベースに接続することができました。
  クエリを発行する前に、PDO がトランザクションをどのように扱うのかを
  理解しなければなりません。トランザクションについてよくわからない方の
  ために説明すると、これは以下の 4 つの機能、つまり
  原子性 - Atomicity、一貫性 - Consistency、独立性 - Isolation および
  永続性 - Durability (ACID) を提供するものです。
  一般的な言葉で言うと、トランザクション内で実行された作業は
  たとえ段階的に行われたものであってもデータベースに安全に反映される
  ことが保証されています。トランザクションのコミット時に他の接続の
  干渉を受けることはありません。また、トランザクション内での作業は
  (まだコミットされていなければ) いつでも自動的に取り消すことが
  できます。これにより、スクリプト内でのエラー処理がより楽になります。
 </para>
 <para>
  トランザクションの一般的な実装は、変更内容を一時的に「蓄えて」おき、
  それを一気に適用するようになっています。この実装には、更新処理の
  性能を劇的に向上させるという効果もあります。つまり、
  トランザクションによってあなたの書くスクリプトはより高速になり、
  また、より堅牢になるということです
  (これらの恩恵をうけるためには、トランザクションを正しく使用する
  必要があります)。
 </para>
 <para>
  残念ながら、すべてのデータベースがトランザクションをサポートしていると
  いうわけではありません。そのため、PDO で最初に接続をオープンした際には、
  いわゆる「自動コミット」モードで動作します。自動コミットモードとは、
  もしデータベースがトランザクションをサポートしていたら個々のクエリが
  暗黙的なトランザクションのもとで実行され、サポートしていなかったら
  トランザクションを使用せずに実行されることを意味します。
  トランザクションを使用する場合は、
  <methodname>PDO::beginTransaction</methodname> メソッドを使用して
  トランザクションを初期化する必要があります。使用しているドライバが
  トランザクションをサポートしていない場合は PDOException が
  スローされます (これは深刻な状態であるため、エラー処理の設定に
  かかわらず常にスローされます)。初期化した後でトランザクションを
  終了させるには、トランザクション内でのコードが成功したか否かに応じて
  <methodname>PDO::commit</methodname> あるいは
  <methodname>PDO::rollBack</methodname> を使用します。
 </para>
 <warning>
  <para>
   PDO は、トランザクション機能をドライバレベルでしかチェックしません。
   実行時に何らかの条件でトランザクションが使えない場合でも、
   データベースサーバーがトランザクション開始要求を受け付けた場合には
   <methodname>PDO::beginTransaction</methodname> は &true;
   を返します。エラーとはなりません。
  </para>
  <para>
   たとえば、MySQL データベースの
   MyISAM テーブルでトランザクションを使おうとした場合にこの現象が発生します。
  </para>
 </warning>
 <warning>
  <para>
   <emphasis>DDL文を使った場合の暗黙のコミット:</emphasis>
   データベースによっては、
   <literal>DROP TABLE</literal> や <literal>CREATE TABLE</literal>,
   のような database definition language (DDL)
   がトランザクション中に実行された場合に、
   自動で暗黙のうちに <literal>COMMIT</literal> を発行するものがあります。
   これは、DDL 文より前に行われた、同じトランザクション中のあらうる変更が
   <emphasis>自動でコミット</emphasis> さて、ロールバックできないことを意味します。
  </para>
  <para>
   こうした振る舞いをするデータベースの例として、
   <literal>MySQL</literal> と <literal>Oracle</literal>
   が挙げられます。
  </para>
 </warning>
 <para>
  <example>
   <title>暗黙のコミットの例</title>
   <programlisting role="php">
<![CDATA[
<?php
$pdo->beginTransaction();
$pdo->exec("INSERT INTO users (name) VALUES ('Rasmus')");
$pdo->exec("CREATE TABLE test (id INT PRIMARY KEY)"); // Implicit COMMIT occurs here
$pdo->rollBack(); // This will NOT undo the INSERT/CREATE for MySQL or Oracle
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <emphasis>ベストプラクティス:</emphasis> このような振る舞いを強制してくるデータベースを使う場合は、トランザクション中で DDL を使うのを避けましょう。
  必要な場合には、DDL の操作をトランザクションのロジックと分離しましょう。
 </para>
 <para>
  スクリプトが終了したり接続が閉じられようとした際に、もし処理が
  完了していないトランザクションがあれば PDO が自動的に
  ロールバックします。これは、スクリプトが予期せぬ状態で終了した場合に
  データの不整合が発生するのを避けるための安全装置です。もし
  明示的にコミットしていなければ、おそらく何かおかしなことが
  起こったのだろうと推測されます。そのため、データを守るために
  ロールバックが行われるのです。
 </para>
 <warning>
  <para>
   自動的にロールバックが行われるのは、トランザクションを
   <methodname>PDO::beginTransaction</methodname> で開始した場合のみです。
   トランザクションを開始するクエリを手動で発行した場合、
   PDO はそれを知ることができません。そのため、何か問題が発生しても
   ロールバックすることはできないのです。
  </para>
 </warning>
 <para>
  <example><title>トランザクション内で一括処理を行う</title>
   <para>
    以下の例では、新しい従業員のデータを作成しているものとします。
    この従業員には ID 番号 23 を割り当てます。この人物についての
    基礎データを入力するだけでなく、その給与についても登録する
    必要があります。以下では単純に 2 つの別々の更新を行っていますが、
    それらは <methodname>PDO::beginTransaction</methodname> および
    <methodname>PDO::commit</methodname> のコールで囲まれています。
    これにより、変更が完了するまでは他からは一切変更内容が
    見えないことが保証されます。もし何か問題が発生すれば、
    catch ブロック内でトランザクション開始以降のすべての変更が
    ロールバックされます。そしてエラーメッセージを表示します。
   </para>
   <programlisting role="php">
<![CDATA[
<?php
try {
  $dbh = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2', 
      array(PDO::ATTR_PERSISTENT => true));
  echo "接続しました\n";
} catch (Exception $e) {
  die("接続できません: " . $e->getMessage());
}

try {  
  $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  $dbh->beginTransaction();
  $dbh->exec("insert into staff (id, first, last) values (23, 'Joe', 'Bloggs')");
  $dbh->exec("insert into salarychange (id, amount, changedate) 
      values (23, 50000, NOW())");
  $dbh->commit();
  
} catch (Exception $e) {
  $dbh->rollBack();
  echo "失敗しました。" . $e->getMessage();
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  トランザクション内で行える処理は、更新には限りません。たとえば
  何か複雑なクエリを発行してデータを抽出し、その情報をもとに
  データの更新をしたり別のクエリを実行したりすることも可能です。
  トランザクションがアクティブな間は、作業中のデータについては
  他から一切変更が加えられないことが保証されます。
  トランザクションについての詳細は、
  使用するデータベースサーバーのドキュメントを参照ください。
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

