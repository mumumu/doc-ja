<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision$ -->
<!-- EN-Revision: 01904e809eaf0aa60e7ce0524400ddd5681c9541 Maintainer: takagi Status: ready -->
<refentry xml:id="xsltprocessor.transformtodoc" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <refnamediv>
  <refname>XSLTProcessor::transformToDoc</refname>
  <refpurpose>ドキュメント に変換する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="XSLTProcessor">
   <modifier>public</modifier> <type class="union"><type>DOMDocument</type><type>false</type></type><methodname>XSLTProcessor::transformToDoc</methodname>
   <methodparam><type>object</type><parameter>document</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>returnClass</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>XSLTProcessor::importStylesheet</function>
   メソッドで与えられたスタイルシートを適用し、
   ソースノードをドキュメント (例: <classname>DOMDocument</classname>) に変換します。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>document</parameter></term>
     <listitem>
      <para>
       変換される <classname>Dom\Document</classname>, <classname>DOMDocument</classname>, <classname>SimpleXMLElement</classname>、または libxml と互換性があるオブジェクトを指定します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>returnClass</parameter></term>
     <listitem>
      <para>
       <methodname>XSLTProcessor::transformToDoc</methodname> が返すオブジェクトのクラス名を指定する、オプションのパラメータです。ここで指定するクラスは、<parameter>document</parameter> と同じものか、それを継承したクラスであるべきです。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <xi:include xpointer="domxpath.query..errors" />

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   結果の ドキュメント を返します。
   エラーが発生した場合は &false; を返します。
  </para>
 </refsect1>

 <xi:include xpointer="xsltprocessor.transformtouri..changelog" />

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><classname>DOMDocument</classname> への変換</title>
    <programlisting role="php">
<![CDATA[
<?php

// XML ソースをロードする
$xml = new DOMDocument;
$xml->load('collection.xml');

$xsl = new DOMDocument;
$xsl->load('collection.xsl');

// 変換の設定を行う
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // XSL ルールを適用する

echo trim($proc->transformToDoc($xml)->firstChild->wholeText);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hey! Welcome to Nicolas Eliaszewicz's sweet CD collection!
]]>
    </screen>
   </example>
   <example>
    <title><classname>Dom\Document</classname> への変換</title>
    <programlisting role="php">
<![CDATA[
<?php

$xml = Dom\XMLDocument::createFromFile('collection.xml');
$xsl = Dom\XMLDocument::createFromFile('collection.xsl');

// 変換の設定を行う
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // XSL ルールを適用する

echo trim($proc->transformToDoc($xml)->firstChild->wholeText);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hey! Welcome to Nicolas Eliaszewicz's sweet CD collection!
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>XSLTProcessor::transformToUri</function></member>
    <member><function>XSLTProcessor::transformToXml</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
